define(['dart_sdk', 'packages/flutter/src/painting/box_border.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/colors.dart', 'packages/flutter/src/painting/box_decoration.dart'], (function load__packages__lazy_data_table__src__lazy_data_table_theme_dart(dart_sdk, packages__flutter__src__painting__box_border$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__colors$46dart, packages__flutter__src__painting__box_decoration$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const box_border = packages__flutter__src__painting__box_border$46dart.src__painting__box_border;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const colors$ = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  const box_decoration = packages__flutter__src__painting__box_decoration$46dart.src__painting__box_decoration;
  var lazy_data_table_theme = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ColorL: () => (T.ColorL = dart.constFn(dart.legacy(ui.Color)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name]: "BorderStyle.solid",
        index: 1
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[2] || CT.C2,
        [BorderSide_width]: 1,
        [BorderSide_color]: C[3] || CT.C3
      });
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: box_border.Border.prototype,
        [Border_left]: C[1] || CT.C1,
        [Border_bottom]: C[1] || CT.C1,
        [Border_right]: C[1] || CT.C1,
        [Border_top]: C[1] || CT.C1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292998654.0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4289979900.0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286698746.0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4283417591.0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280923894.0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278430196.0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278426597.0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278356177.0
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278351805.0
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278278043.0
      });
    },
    get C5() {
      return C[5] = dart.constMap(T.intL(), T.ColorL(), [50, C[6] || CT.C6, 100, C[7] || CT.C7, 200, C[8] || CT.C8, 300, C[9] || CT.C9, 400, C[10] || CT.C10, 500, C[11] || CT.C11, 600, C[12] || CT.C12, 700, C[13] || CT.C13, 800, C[14] || CT.C14, 900, C[15] || CT.C15]);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: colors.MaterialColor.prototype,
        [Color_value]: 4278430196.0,
        [ColorSwatch__swatch]: C[5] || CT.C5
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294309365.0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293128957.0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290502395.0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4287679225.0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284790262.0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282557941.0
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280391411.0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280191205.0
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279858898.0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279592384.0
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279060385.0
      });
    },
    get C19() {
      return C[19] = dart.constMap(T.intL(), T.ColorL(), [50, C[20] || CT.C20, 100, C[21] || CT.C21, 200, C[22] || CT.C22, 300, C[23] || CT.C23, 400, C[24] || CT.C24, 500, C[25] || CT.C25, 600, C[26] || CT.C26, 700, C[27] || CT.C27, 800, C[28] || CT.C28, 900, C[29] || CT.C29]);
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: colors.MaterialColor.prototype,
        [Color_value]: 4280391411.0,
        [ColorSwatch__swatch]: C[19] || CT.C19
      });
    }
  }, false);
  var C = Array(30).fill(void 0);
  var I = [
    "file:///C:/Users/epenta/Documents/flutter/.pub-cache/hosted/pub.dartlang.org/lazy_data_table-0.3.0/lib/src/lazy_data_table_theme.dart",
    "package:lazy_data_table/src/lazy_data_table_theme.dart"
  ];
  var columnHeaderBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.columnHeaderBorder");
  var columnHeaderColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.columnHeaderColor");
  var alternateColumnHeaderBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateColumnHeaderBorder");
  var alternateColumnHeaderColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateColumnHeaderColor");
  var rowHeaderBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.rowHeaderBorder");
  var rowHeaderColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.rowHeaderColor");
  var alternateRowHeaderBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateRowHeaderBorder");
  var alternateRowHeaderColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateRowHeaderColor");
  var cellBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.cellBorder");
  var cellColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.cellColor");
  var alternateCellBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateCellBorder");
  var alternateCellColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateCellColor");
  var cornerBorder$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.cornerBorder");
  var cornerColor$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.cornerColor");
  var alternateRow$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateRow");
  var alternateColumn$ = dart.privateName(lazy_data_table_theme, "LazyDataTableTheme.alternateColumn");
  var _name = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var Border_left = dart.privateName(box_border, "Border.left");
  var Border_bottom = dart.privateName(box_border, "Border.bottom");
  var Border_right = dart.privateName(box_border, "Border.right");
  var Border_top = dart.privateName(box_border, "Border.top");
  var ColorSwatch__swatch = dart.privateName(colors$, "ColorSwatch._swatch");
  lazy_data_table_theme.LazyDataTableTheme = class LazyDataTableTheme extends core.Object {
    get columnHeaderBorder() {
      return this[columnHeaderBorder$];
    }
    set columnHeaderBorder(value) {
      super.columnHeaderBorder = value;
    }
    get columnHeaderColor() {
      return this[columnHeaderColor$];
    }
    set columnHeaderColor(value) {
      super.columnHeaderColor = value;
    }
    get alternateColumnHeaderBorder() {
      return this[alternateColumnHeaderBorder$];
    }
    set alternateColumnHeaderBorder(value) {
      super.alternateColumnHeaderBorder = value;
    }
    get alternateColumnHeaderColor() {
      return this[alternateColumnHeaderColor$];
    }
    set alternateColumnHeaderColor(value) {
      super.alternateColumnHeaderColor = value;
    }
    get rowHeaderBorder() {
      return this[rowHeaderBorder$];
    }
    set rowHeaderBorder(value) {
      super.rowHeaderBorder = value;
    }
    get rowHeaderColor() {
      return this[rowHeaderColor$];
    }
    set rowHeaderColor(value) {
      super.rowHeaderColor = value;
    }
    get alternateRowHeaderBorder() {
      return this[alternateRowHeaderBorder$];
    }
    set alternateRowHeaderBorder(value) {
      super.alternateRowHeaderBorder = value;
    }
    get alternateRowHeaderColor() {
      return this[alternateRowHeaderColor$];
    }
    set alternateRowHeaderColor(value) {
      super.alternateRowHeaderColor = value;
    }
    get cellBorder() {
      return this[cellBorder$];
    }
    set cellBorder(value) {
      super.cellBorder = value;
    }
    get cellColor() {
      return this[cellColor$];
    }
    set cellColor(value) {
      super.cellColor = value;
    }
    get alternateCellBorder() {
      return this[alternateCellBorder$];
    }
    set alternateCellBorder(value) {
      super.alternateCellBorder = value;
    }
    get alternateCellColor() {
      return this[alternateCellColor$];
    }
    set alternateCellColor(value) {
      super.alternateCellColor = value;
    }
    get cornerBorder() {
      return this[cornerBorder$];
    }
    set cornerBorder(value) {
      super.cornerBorder = value;
    }
    get cornerColor() {
      return this[cornerColor$];
    }
    set cornerColor(value) {
      super.cornerColor = value;
    }
    get alternateRow() {
      return this[alternateRow$];
    }
    set alternateRow(value) {
      super.alternateRow = value;
    }
    get alternateColumn() {
      return this[alternateColumn$];
    }
    set alternateColumn(value) {
      super.alternateColumn = value;
    }
    get columnHeader() {
      return new box_decoration.BoxDecoration.new({border: this.columnHeaderBorder, color: this.columnHeaderColor});
    }
    get alternateColumnHeader() {
      return new box_decoration.BoxDecoration.new({border: this.alternateColumnHeaderBorder, color: this.alternateColumnHeaderColor});
    }
    get rowHeader() {
      return new box_decoration.BoxDecoration.new({border: this.rowHeaderBorder, color: this.rowHeaderColor});
    }
    get alternateRowHeader() {
      return new box_decoration.BoxDecoration.new({border: this.alternateRowHeaderBorder, color: this.alternateRowHeaderColor});
    }
    get cell() {
      return new box_decoration.BoxDecoration.new({border: this.cellBorder, color: this.cellColor});
    }
    get alternateCell() {
      return new box_decoration.BoxDecoration.new({border: this.alternateCellBorder, color: this.alternateCellColor});
    }
    get corner() {
      return new box_decoration.BoxDecoration.new({border: this.cornerBorder, color: this.cornerColor});
    }
  };
  (lazy_data_table_theme.LazyDataTableTheme.new = function(opts) {
    let columnHeaderBorder = opts && 'columnHeaderBorder' in opts ? opts.columnHeaderBorder : C[0] || CT.C0;
    if (columnHeaderBorder == null) dart.nullFailed(I[0], 6, 10, "columnHeaderBorder");
    let columnHeaderColor = opts && 'columnHeaderColor' in opts ? opts.columnHeaderColor : C[4] || CT.C4;
    if (columnHeaderColor == null) dart.nullFailed(I[0], 8, 10, "columnHeaderColor");
    let alternateColumnHeaderBorder = opts && 'alternateColumnHeaderBorder' in opts ? opts.alternateColumnHeaderBorder : C[0] || CT.C0;
    if (alternateColumnHeaderBorder == null) dart.nullFailed(I[0], 9, 10, "alternateColumnHeaderBorder");
    let alternateColumnHeaderColor = opts && 'alternateColumnHeaderColor' in opts ? opts.alternateColumnHeaderColor : C[4] || CT.C4;
    if (alternateColumnHeaderColor == null) dart.nullFailed(I[0], 11, 10, "alternateColumnHeaderColor");
    let rowHeaderBorder = opts && 'rowHeaderBorder' in opts ? opts.rowHeaderBorder : C[0] || CT.C0;
    if (rowHeaderBorder == null) dart.nullFailed(I[0], 12, 10, "rowHeaderBorder");
    let rowHeaderColor = opts && 'rowHeaderColor' in opts ? opts.rowHeaderColor : C[4] || CT.C4;
    if (rowHeaderColor == null) dart.nullFailed(I[0], 14, 10, "rowHeaderColor");
    let alternateRowHeaderBorder = opts && 'alternateRowHeaderBorder' in opts ? opts.alternateRowHeaderBorder : C[0] || CT.C0;
    if (alternateRowHeaderBorder == null) dart.nullFailed(I[0], 15, 10, "alternateRowHeaderBorder");
    let alternateRowHeaderColor = opts && 'alternateRowHeaderColor' in opts ? opts.alternateRowHeaderColor : C[4] || CT.C4;
    if (alternateRowHeaderColor == null) dart.nullFailed(I[0], 17, 10, "alternateRowHeaderColor");
    let cellBorder = opts && 'cellBorder' in opts ? opts.cellBorder : C[0] || CT.C0;
    if (cellBorder == null) dart.nullFailed(I[0], 18, 10, "cellBorder");
    let cellColor = opts && 'cellColor' in opts ? opts.cellColor : C[16] || CT.C16;
    if (cellColor == null) dart.nullFailed(I[0], 20, 10, "cellColor");
    let alternateCellBorder = opts && 'alternateCellBorder' in opts ? opts.alternateCellBorder : C[0] || CT.C0;
    if (alternateCellBorder == null) dart.nullFailed(I[0], 21, 10, "alternateCellBorder");
    let alternateCellColor = opts && 'alternateCellColor' in opts ? opts.alternateCellColor : C[17] || CT.C17;
    if (alternateCellColor == null) dart.nullFailed(I[0], 23, 10, "alternateCellColor");
    let cornerBorder = opts && 'cornerBorder' in opts ? opts.cornerBorder : C[0] || CT.C0;
    if (cornerBorder == null) dart.nullFailed(I[0], 24, 10, "cornerBorder");
    let cornerColor = opts && 'cornerColor' in opts ? opts.cornerColor : C[18] || CT.C18;
    if (cornerColor == null) dart.nullFailed(I[0], 26, 10, "cornerColor");
    let alternateRow = opts && 'alternateRow' in opts ? opts.alternateRow : true;
    if (alternateRow == null) dart.nullFailed(I[0], 27, 10, "alternateRow");
    let alternateColumn = opts && 'alternateColumn' in opts ? opts.alternateColumn : false;
    if (alternateColumn == null) dart.nullFailed(I[0], 28, 10, "alternateColumn");
    this[columnHeaderBorder$] = columnHeaderBorder;
    this[columnHeaderColor$] = columnHeaderColor;
    this[alternateColumnHeaderBorder$] = alternateColumnHeaderBorder;
    this[alternateColumnHeaderColor$] = alternateColumnHeaderColor;
    this[rowHeaderBorder$] = rowHeaderBorder;
    this[rowHeaderColor$] = rowHeaderColor;
    this[alternateRowHeaderBorder$] = alternateRowHeaderBorder;
    this[alternateRowHeaderColor$] = alternateRowHeaderColor;
    this[cellBorder$] = cellBorder;
    this[cellColor$] = cellColor;
    this[alternateCellBorder$] = alternateCellBorder;
    this[alternateCellColor$] = alternateCellColor;
    this[cornerBorder$] = cornerBorder;
    this[cornerColor$] = cornerColor;
    this[alternateRow$] = alternateRow;
    this[alternateColumn$] = alternateColumn;
    ;
  }).prototype = lazy_data_table_theme.LazyDataTableTheme.prototype;
  dart.addTypeTests(lazy_data_table_theme.LazyDataTableTheme);
  dart.addTypeCaches(lazy_data_table_theme.LazyDataTableTheme);
  dart.setGetterSignature(lazy_data_table_theme.LazyDataTableTheme, () => ({
    __proto__: dart.getGetters(lazy_data_table_theme.LazyDataTableTheme.__proto__),
    columnHeader: box_decoration.BoxDecoration,
    alternateColumnHeader: box_decoration.BoxDecoration,
    rowHeader: box_decoration.BoxDecoration,
    alternateRowHeader: box_decoration.BoxDecoration,
    cell: box_decoration.BoxDecoration,
    alternateCell: box_decoration.BoxDecoration,
    corner: box_decoration.BoxDecoration
  }));
  dart.setLibraryUri(lazy_data_table_theme.LazyDataTableTheme, I[1]);
  dart.setFieldSignature(lazy_data_table_theme.LazyDataTableTheme, () => ({
    __proto__: dart.getFields(lazy_data_table_theme.LazyDataTableTheme.__proto__),
    columnHeaderBorder: dart.finalFieldType(box_border.BoxBorder),
    columnHeaderColor: dart.finalFieldType(ui.Color),
    alternateColumnHeaderBorder: dart.finalFieldType(box_border.BoxBorder),
    alternateColumnHeaderColor: dart.finalFieldType(ui.Color),
    rowHeaderBorder: dart.finalFieldType(box_border.BoxBorder),
    rowHeaderColor: dart.finalFieldType(ui.Color),
    alternateRowHeaderBorder: dart.finalFieldType(box_border.BoxBorder),
    alternateRowHeaderColor: dart.finalFieldType(ui.Color),
    cellBorder: dart.finalFieldType(box_border.BoxBorder),
    cellColor: dart.finalFieldType(ui.Color),
    alternateCellBorder: dart.finalFieldType(box_border.BoxBorder),
    alternateCellColor: dart.finalFieldType(ui.Color),
    cornerBorder: dart.finalFieldType(box_border.BoxBorder),
    cornerColor: dart.finalFieldType(ui.Color),
    alternateRow: dart.finalFieldType(core.bool),
    alternateColumn: dart.finalFieldType(core.bool)
  }));
  dart.trackLibraries("packages/lazy_data_table/src/lazy_data_table_theme.dart", {
    "package:lazy_data_table/src/lazy_data_table_theme.dart": lazy_data_table_theme
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["lazy_data_table_theme.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BkB;;;;;;IAGJ;;;;;;IAOI;;;;;;IAGJ;;;;;;IAOI;;;;;;IAGJ;;;;;;IAOI;;;;;;IAGJ;;;;;;IAOI;;;;;;IAGJ;;;;;;IAMI;;;;;;IAGJ;;;;;;IAOI;;;;;;IAGJ;;;;;;IAOD;;;;;;IAGA;;;;;;;AAjEP,2DAAsB,gCAA2B;IAAkB;;AAS5B,2DAC/B,yCAAoC;IAA2B;;AAUvE,2DAAsB,6BAAwB;IAAe;;AASzB,2DAC5B,sCAAiC;IAAwB;;AAS3C,2DAAsB,wBAAmB;IAAU;;AAUzE,2DAAsB,iCAA4B;IAAmB;;AAUrE,2DAAsB,0BAAqB;IAAY;;;QA5FpD;;QAEA;;QACA;;QAEA;;QACA;;QAEA;;QACA;;QAEA;;QACA;;QAEA;;QACA;;QAEA;;QACA;;QAEA;;QACA;;QACA;;IAtBA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IACA;;EACL","file":"../../../../../../../../../../packages/lazy_data_table/src/lazy_data_table_theme.dart.lib.js"}');
  // Exports:
  return {
    src__lazy_data_table_theme: lazy_data_table_theme
  };
}));

//# sourceMappingURL=lazy_data_table_theme.dart.lib.js.map
